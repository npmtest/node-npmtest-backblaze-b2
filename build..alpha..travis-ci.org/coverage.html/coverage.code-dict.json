{"/home/travis/build/npmtest/node-npmtest-backblaze-b2/test.js":"/* istanbul instrument in package npmtest_backblaze_b2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-backblaze-b2/lib.npmtest_backblaze_b2.js":"/* istanbul instrument in package npmtest_backblaze_b2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_backblaze_b2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_backblaze_b2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-backblaze-b2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-backblaze-b2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_backblaze_b2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_backblaze_b2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_backblaze_b2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_backblaze_b2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_backblaze_b2.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_backblaze_b2.__dirname +\n                    '/lib.npmtest_backblaze_b2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-backblaze-b2/node_modules/backblaze-b2/index.js":"module.exports = require('./lib/b2');\n","/home/travis/build/npmtest/node-npmtest-backblaze-b2/node_modules/backblaze-b2/lib/b2.js":"var actions = require('./actions');\n\nfunction B2(options) {\n    this.accountId = options.accountId;\n    this.applicationKey = options.applicationKey;\n    this.authorizationToken = null;\n    this.apiUrl = null;\n    this.downloadUrl = null;\n}\n\nB2.prototype.BUCKET_TYPES = actions.bucket.TYPES;\n\nB2.prototype.authorize = function() {\n    return actions.auth.authorize(this, this.accountId, this.applicationKey);\n};\n\nB2.prototype.createBucket = function(bucketName, bucketType) {\n    return actions.bucket.create(this, bucketName, bucketType);\n};\n\nB2.prototype.deleteBucket = function(bucketId) {\n    return actions.bucket.delete(this, bucketId);\n};\n\nB2.prototype.listBuckets = function() {\n    return actions.bucket.list(this);\n};\n\nB2.prototype.updateBucket = function(bucketId, bucketType) {\n    return actions.bucket.update(this, bucketId, bucketType);\n};\n\nB2.prototype.getUploadUrl = function(bucketId) {\n    return actions.bucket.getUploadUrl(this, bucketId);\n};\n\n// args:\n// - uploadUrl\n// - uploadAuthToken\n// - filename\n// - data\nB2.prototype.uploadFile = function(args) {\n    return actions.file.uploadFile(this, args);\n};\n\n// args:\n// - bucketId\n// - startFileName (optional)\n// - maxFileCount (optional)\nB2.prototype.listFileNames = function(args) {\n    return actions.file.listFileNames(this, args);\n};\n\n// args:\n// - bucketId\n// - startFileName (optional)\n// - maxFileCount (optional)\nB2.prototype.listFileVersions = function(args) {\n    return actions.file.listFileVersions(this, args);\n};\n\n// args:\n// - bucketId\n// - fileName\nB2.prototype.hideFile = function(args) {\n    return actions.file.hideFile(this, args);\n};\n\nB2.prototype.getFileInfo = function(fileId) {\n    return actions.file.getFileInfo(this, fileId);\n};\n\n// args:\n// - bucketName\n// - fileName\nB2.prototype.downloadFileByName = function(args) {\n    return actions.file.downloadFileByName(this, args);\n};\n\nB2.prototype.downloadFileById = function(fileId) {\n    return actions.file.downloadFileById(this, fileId);\n};\n\n// args:\n// - fileId\n// - fileName\nB2.prototype.deleteFileVersion = function(args) {\n    return actions.file.deleteFileVersion(this, args);\n};\n\n// b2_cancel_large_file\nB2.prototype.cancelLargeFile = function(args) {\n    return actions.file.cancelLargeFile(this, args);\n};\n\n// b2_finish_large_file\nB2.prototype.finishLargeFile = function(args) {\n    return actions.file.finishLargeFile(this, args);\n};\n\n// b2_list_parts\nB2.prototype.listParts = notYetImplemented;\n\n// b2_list_unfinished_large_files\nB2.prototype.listUnfinishedLargeFiles = notYetImplemented;\n\n// b2_start_large_file\nB2.prototype.startLargeFile = function(args) {\n    return actions.file.startLargeFile(this, args);\n};\n\nB2.prototype.getUploadPartUrl = function(args) {\n    return actions.file.getUploadPartUrl(this, args);\n};\n\n// b2_upload_part\nB2.prototype.uploadPart = function(args) {\n    return actions.file.uploadPart(this, args);\n};\n\nvar q = require('q');\nfunction notYetImplemented() {\n    var deferred = q.defer();\n\n    deferred.reject('Feature not yet implemented');\n\n    return deferred.promise;\n}\n\nmodule.exports = B2;\n","/home/travis/build/npmtest/node-npmtest-backblaze-b2/node_modules/backblaze-b2/lib/actions/index.js":"module.exports = {\n    auth: require('./auth'),\n    bucket: require('./bucket'),\n    file: require('./file')\n};\n","/home/travis/build/npmtest/node-npmtest-backblaze-b2/node_modules/backblaze-b2/lib/actions/auth.js":"var conf = require('../../conf');\nvar request = require('./../request');\nvar utils = require('./../utils');\n\nexports.authorize = function(b2) {\n    var options = getRequestOptions(b2.accountId, b2.applicationKey);\n\n    var axiosInstance = request.getInstance();\n    return axiosInstance(options).then(function(res) {\n        utils.saveAuthContext(b2, res.data);\n        return res; // For testing and/or Promise chaining\n    });\n};\n\nfunction getRequestOptions(accountId, applicationKey) {\n    return {\n        url: conf.API_AUTHORIZE__URL,\n        headers: utils.getAuthHeaderObject(accountId, applicationKey)\n    };\n}\n","/home/travis/build/npmtest/node-npmtest-backblaze-b2/node_modules/backblaze-b2/conf.js":"module.exports = {\n    API_AUTHORIZE__URL: 'https://api.backblaze.com/b2api/v1/b2_authorize_account',\n    API_VERSION_URL: '/b2api/v1',\n    MAX_INFO_HEADERS: 10    // maximum number of custom x-bz-info-* headers\n};\n","/home/travis/build/npmtest/node-npmtest-backblaze-b2/node_modules/backblaze-b2/lib/request.js":"var utils = require('./utils.js');\nvar REQUEST;\n\nexports.setup = function(requestObject) {\n    REQUEST = requestObject;\n};\n\nexports.sendRequest = function(options) {\n    var requestInstance = exports.getInstance();\n    return requestInstance(options, utils.processResponseGeneric());\n};\n\nexports.getInstance = function() {\n    return REQUEST || require('axios');\n};\n","/home/travis/build/npmtest/node-npmtest-backblaze-b2/node_modules/backblaze-b2/lib/utils.js":"exports.getAuthHeaderObject = function(accountId, applicationKey) {\n    if (!accountId) {\n        throw new Error('Invalid accountId');\n    }\n    if (!applicationKey) {\n        throw new Error('Invalid applicationKey');\n    }\n    var base64 = new Buffer(accountId + ':' + applicationKey).toString('base64');\n    return {\n        Authorization: 'Basic ' + base64\n    };\n};\n\nexports.getAuthHeaderObjectWithToken = function(b2) {\n    if (!b2) {\n        throw new Error('Invalid B2 instance');\n    }\n    if (!b2.authorizationToken) {\n        throw new Error('Invalid authorizationToken');\n    }\n    return {\n        Authorization: b2.authorizationToken\n    };\n};\n\nexports.parseJson = function(jsonString) {\n    try {\n        return JSON.parse(jsonString);\n    } catch (e) {\n        // got error\n    }\n};\n\nexports.saveAuthContext = function (context, authResponse) {\n    context.authorizationToken = authResponse.authorizationToken;\n    context.apiUrl = authResponse.apiUrl;\n    context.downloadUrl = authResponse.downloadUrl;\n};\n\nexports.getProcessFileSuccess = function(deferred) {\n    return function(error, response, body, promise) {\n        deferred = deferred || promise;\n        if (error) {\n            deferred.reject(error);\n        } else if (response.statusCode !== 200) {\n            deferred.reject(response.statusMessage);\n        } else {\n            deferred.resolve(response);\n        }\n    };\n};\n\nexports.processResponseGeneric = function (deferred) {\n    return function(error, response, body, promise) {\n        deferred = deferred || promise;\n        if (error) {\n            return deferred.reject(error);\n        } else {\n            var genericResponse = exports.parseJson(body);\n            deferred.resolve(genericResponse);\n        }\n    };\n};\n\nexports.getUrlEncodedFileName = function(fileName) {\n    return fileName.split('/')\n        .map(encodeURIComponent)\n        .join('/');\n};\n","/home/travis/build/npmtest/node-npmtest-backblaze-b2/node_modules/backblaze-b2/lib/actions/bucket.js":"var utils = require('./../utils');\nvar request = require('../request');\nvar conf = require('../../conf');\n\nexports.TYPES = {\n    ALL_PUBLIC: 'allPublic',\n    ALL_PRIVATE: 'allPrivate'\n};\n\nexports.create = function(b2, bucketName, bucketType) {\n    var options = {\n        url: getCreateUrl(b2, bucketName, bucketType),\n        method: 'POST',\n        headers: utils.getAuthHeaderObjectWithToken(b2),\n        data: {\n            accountId: b2.accountId,\n            bucketName: bucketName,\n            bucketType: bucketType\n        }\n    };\n    return request.sendRequest(options);\n};\n\nexports.delete = function(b2, bucketId) {\n    var options = {\n        url: getDeleteUrl(b2),\n        method: 'POST',\n        data: {\n            accountId: b2.accountId,\n            bucketId: bucketId\n        },\n        headers: utils.getAuthHeaderObjectWithToken(b2)\n    };\n    return request.sendRequest(options);\n};\n\nexports.list = function(b2) {\n    var options = {\n        url: getListUrl(b2),\n        method: 'POST',\n        data: {\n            accountId: b2.accountId\n        },\n        headers: utils.getAuthHeaderObjectWithToken(b2)\n\n    };\n    return request.sendRequest(options);\n};\n\nexports.update = function(b2, bucketId, bucketType) {\n    var options = {\n        url: getUpdateUrl(b2),\n        method: 'POST',\n        data: {\n            accountId: b2.accountId,\n            bucketId: bucketId,\n            bucketType: bucketType\n        },\n        headers: utils.getAuthHeaderObjectWithToken(b2)\n    };\n    return request.sendRequest(options);\n};\n\nexports.getUploadUrl = function(b2, bucketId) {\n    var options = {\n        url: getGetUploadUrl(b2),\n        method: 'POST',\n        data: {\n            bucketId: bucketId\n        },\n        headers: utils.getAuthHeaderObjectWithToken(b2)\n    };\n    return request.sendRequest(options);\n};\n\nfunction getCreateUrl(b2) {\n    return getApiUrl(b2) + '/b2_create_bucket';\n}\n\nfunction getDeleteUrl(b2) {\n    return getApiUrl(b2) + '/b2_delete_bucket';\n}\n\nfunction getListUrl(b2) {\n    return getApiUrl(b2) + '/b2_list_buckets';\n}\n\nfunction getUpdateUrl(b2) {\n    return getApiUrl(b2) + '/b2_update_bucket';\n}\n\nfunction getGetUploadUrl(b2) {\n    return getApiUrl(b2) + '/b2_get_upload_url';\n}\n\nfunction getApiUrl(b2) {\n    return b2.apiUrl + conf.API_VERSION_URL;\n}\n","/home/travis/build/npmtest/node-npmtest-backblaze-b2/node_modules/backblaze-b2/lib/actions/file.js":"var sha1 = require('node-sha1');\n\nvar utils = require('./../utils');\nvar headersUtil = require('../headers');\nvar request = require('../request');\nvar conf = require('../../conf');\n\nexports.uploadFile = function(b2, args) {\n    var uploadUrl = args.uploadUrl;\n    var uploadAuthToken = args.uploadAuthToken;\n    var filename = utils.getUrlEncodedFileName(args.filename);\n    var data = args.data;\n    var info = args.info;\n    var mime = args.mime;\n\n    var options = {\n        url: uploadUrl,\n        method: 'POST',\n        headers: {\n            Authorization: uploadAuthToken,\n            'Content-Type': mime || 'b2/x-auto',\n            'X-Bz-File-Name': filename,\n            'X-Bz-Content-Sha1': data ? sha1(data) : null\n        },\n        data: data,\n        onUploadProgress: args.onUploadProgress || null\n    };\n    headersUtil.addInfoHeaders(options, info);\n    return request.sendRequest(options);\n};\n\nexports.startLargeFile = function(b2, args) {\n    var options = {\n        url: getStartLargeFileUrl(b2),\n        method: 'POST',\n        headers: utils.getAuthHeaderObjectWithToken(b2),\n        data: {\n            bucketId: args.bucketId,\n            fileName: args.fileName,\n            contentType: args.contentType || 'b2/x-auto'\n        }\n    };\n    return request.sendRequest(options);\n};\n\nexports.getUploadPartUrl = function(b2, args) {\n    var options = {\n        url: getGetUploadPartUrl(b2),\n        method: 'POST',\n        headers: utils.getAuthHeaderObjectWithToken(b2),\n        data: {\n            fileId: args.fileId\n        }\n    };\n    return request.sendRequest(options);\n};\n\nexports.uploadPart = function(b2, args) {\n    var options = {\n        url: args.uploadUrl,\n        method: 'POST',\n        headers: {\n            Authorization: args.uploadAuthToken,\n            'X-Bz-Part-Number': args.partNumber,\n            'X-Bz-Content-Sha1': args.data ? sha1(args.data) : null\n        },\n        data: args.data,\n        onUploadProgress: args.onUploadProgress || null\n    };\n    return request.sendRequest(options);\n};\n\nexports.finishLargeFile = function(b2, args) {\n    var options = {\n        url: getFinishLargeFileUrl(b2),\n        method: 'POST',\n        headers: utils.getAuthHeaderObjectWithToken(b2),\n        data: {\n            fileId: args.fileId,\n            partSha1Array: args.partSha1Array\n        }\n    };\n    return request.sendRequest(options);\n};\n\nexports.cancelLargeFile = function(b2, args) {\n    var options = {\n        url: getCancelLargeFileUrl(b2),\n        method: 'POST',\n        headers: utils.getAuthHeaderObjectWithToken(b2),\n        data: {\n            fileId: args.fileId\n        }\n    };\n    return request.sendRequest(options);\n};\n\nexports.listFileNames = function(b2, args) {\n    var bucketId = args.bucketId;\n    var startFileName = args.startFileName;\n    var maxFileCount = args.maxFileCount;\n    var prefix = args.prefix;\n    var delimiter = args.delimiter;\n\n\n    var options = {\n        url: getListFilesUrl(b2),\n        method: 'POST',\n        headers: utils.getAuthHeaderObjectWithToken(b2),\n        data: {\n            bucketId: bucketId,\n            startFileName: startFileName ? startFileName : '',\n            maxFileCount: maxFileCount ? maxFileCount : 100,\n            prefix: prefix ? prefix : '',\n            delimiter: delimiter ? delimiter : null\n\n        }\n    };\n    return request.sendRequest(options, utils.getProcessFileSuccess(options));\n};\n\nexports.listFileVersions = function(b2, args) {\n    var bucketId = args.bucketId;\n    var startFileName = args.startFileName;\n    var maxFileCount = args.maxFileCount;\n\n    var options = {\n        url: getListFileVersionsUrl(b2),\n        method: 'POST',\n        headers: utils.getAuthHeaderObjectWithToken(b2),\n        data: {\n            bucketId: bucketId,\n            startFileName: startFileName ? startFileName : '',\n            maxFileCount: maxFileCount ? maxFileCount : 100\n        }\n    };\n    return request.sendRequest(options);\n};\n\nexports.hideFile = function(b2, args) {\n    var bucketId = args.bucketId;\n    var fileName = args.fileName;\n\n    var options = {\n        url: getHideFileUrl(b2),\n        method: 'POST',\n        headers: utils.getAuthHeaderObjectWithToken(b2),\n        data: {\n            bucketId: bucketId,\n            fileName: fileName\n        }\n    };\n    return request.sendRequest(options);\n};\n\nexports.getFileInfo = function(b2, fileId) {\n    var options = {\n        url: getFileInfoUrl(b2),\n        method: 'POST',\n        headers: utils.getAuthHeaderObjectWithToken(b2),\n        data: {\n            fileId: fileId\n        }\n    };\n    return request.sendRequest(options);\n};\n\nexports.downloadFileByName = function(b2, args) {\n    var bucketName = args.bucketName;\n    var fileName = utils.getUrlEncodedFileName(args.fileName);\n\n    var options = {\n        url: getDownloadFileByNameUrl(b2, bucketName, fileName),\n        headers: utils.getAuthHeaderObjectWithToken(b2),\n        responseType: args.responseType || null,\n        encoding: null,\n        transformResponse: args.transformResponse || null,\n        onDownloadProgress: args.onDownloadProgress || null\n    };\n\n    var requestInstance = request.getInstance();\n    return requestInstance(options, utils.getProcessFileSuccess());\n};\n\nexports.downloadFileById = function(b2, args) {\n    var options = {\n        url: getDownloadFileByIdUrl(b2, args.fileId),\n        headers: utils.getAuthHeaderObjectWithToken(b2),\n        responseType: args.responseType || null,\n        encoding: null,\n        transformResponse: args.transformResponse || null,\n        onDownloadProgress: args.onDownloadProgress || null\n    };\n\n    var requestInstance = request.getInstance();\n    return requestInstance(options, utils.getProcessFileSuccess());\n};\n\nexports.deleteFileVersion = function(b2, args) {\n    var fileId = args.fileId;\n    var fileName = args.fileName;\n\n    var options = {\n        url: getDeleteFileVersionUrl(b2),\n        method: 'POST',\n        headers: utils.getAuthHeaderObjectWithToken(b2),\n        data: {\n            fileId: fileId,\n            fileName: fileName\n        }\n    };\n\n    return request.sendRequest(options);\n};\n\nfunction getListFilesUrl(b2) {\n    return getApiUrl(b2) + '/b2_list_file_names';\n}\n\nfunction getListFileVersionsUrl(b2) {\n    return getApiUrl(b2) + '/b2_list_file_versions';\n}\n\nfunction getHideFileUrl(b2) {\n    return getApiUrl(b2) + '/b2_hide_file';\n}\n\nfunction getFileInfoUrl(b2) {\n    return getApiUrl(b2) + '/b2_get_file_info';\n}\n\nfunction getDownloadFileByNameUrl(b2, bucketName, fileName) {\n    return b2.downloadUrl + '/file/' + bucketName + '/' + fileName;\n}\n\nfunction getDownloadFileByIdUrl(b2, fileId) {\n    return b2.downloadUrl + conf.API_VERSION_URL + '/b2_download_file_by_id?fileId=' + fileId;\n}\n\nfunction getDeleteFileVersionUrl(b2) {\n    return getApiUrl(b2) + '/b2_delete_file_version';\n}\n\nfunction getApiUrl(b2) {\n    return b2.apiUrl + conf.API_VERSION_URL;\n}\n\nfunction getStartLargeFileUrl(b2) {\n    return getApiUrl(b2) + '/b2_start_large_file';\n}\n\nfunction getGetUploadPartUrl(b2) {\n    return getApiUrl(b2) + '/b2_get_upload_part_url';\n}\n\nfunction getFinishLargeFileUrl(b2) {\n    return getApiUrl(b2) + '/b2_finish_large_file';\n}\n\nfunction getCancelLargeFileUrl(b2) {\n    return getApiUrl(b2) + '/b2_cancel_large_file';\n}\n","/home/travis/build/npmtest/node-npmtest-backblaze-b2/node_modules/backblaze-b2/lib/headers.js":"var conf = require('../conf');\n\nexports.addInfoHeaders = function(options, info) {\n    var MAX_INFO_HEADERS = conf.MAX_INFO_HEADERS;\n    var invalidKeys = [];\n    if (info) {\n        var keys = Object.keys(info);\n\n        if (keys.length > MAX_INFO_HEADERS) {\n            throw new Error('Too many info headers: maximum of ' + MAX_INFO_HEADERS + ' allowed');\n        }\n\n        keys.forEach(addInfoHeader);\n\n        if (invalidKeys.length) {\n            throw new Error('Info header keys contain invalid characters: ' + invalidKeys.join('   '));\n        }\n    }\n\n    function isValidHeader(header) {\n        return /^[a-z0-9\\-]+$/i.test(header);\n    }\n\n    function addInfoHeader(infoKey) {\n        if (isValidHeader(infoKey)) {\n            var key = 'X-Bz-Info-' + infoKey;\n            options.headers[key] = encodeURIComponent(info[infoKey]);\n        } else {\n            return invalidKeys.push(infoKey);\n        }\n    }\n};\n\nexports.addBzHeaders = function(headers, targetObj) {\n    var keys = Object.keys(headers);\n\n    return keys.filter(isBzHeader)\n        .map(getKeyObj)\n        .map(setKeyValue);\n\n    function isBzHeader(header) {\n        return /^X-Bz-/i.test(header);\n    }\n\n    function getKeyObj(header) {\n        var replacement = /^X-Bz-Info-/i.test(header) ? /X-Bz-Info-/i : /X-Bz-/i;\n        return {\n            original: header,\n            header: camelCase(header.replace(replacement, ''))\n        };\n    }\n\n    function setKeyValue(headerObj) {\n        targetObj[headerObj.header] = headers[headerObj.original];\n    }\n\n    function camelCase(header) {\n        return header.split('-')\n            .map(firstLetterCapitalise)\n            .join('');\n    }\n\n    function firstLetterCapitalise(word, index) {\n        if (index === 0) { // skip first letter\n            return word;\n        }\n        return word[0].toUpperCase() + word.substr(1);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-backblaze-b2/node_modules/backblaze-b2/.eslintrc.js":"module.exports = {\n    \"rules\": {\n        \"indent\": [\n            2,\n            4\n        ],\n        \"quotes\": [\n            2,\n            \"single\"\n        ],\n        \"linebreak-style\": [\n            2,\n            \"unix\"\n        ],\n        \"semi\": [\n            2,\n            \"always\"\n        ]\n    },\n    \"env\": {\n        \"node\": true\n    },\n    \"extends\": \"eslint:recommended\"\n};"}